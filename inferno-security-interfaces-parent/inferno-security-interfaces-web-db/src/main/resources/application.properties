# ===============================
# = APPLICATION
# ===============================
spring.application.name=Inferno Security Web DB Interface
server.port=8090
#server.error.include-stacktrace=always
inferno.token.secret=9SyECk96oDsTmXfogIieDI0cD/8FpnojlYSUJT5U9I/FGVmBz5oskmjOR8cbXTvoPjX+Pq/T/b1PqpHX0lYm0oCBjXWICA==
# ===============================
# = LOGGING
# ===============================
logging.level.root=info
logging.level.org.springframework=info
logging.level.org.springframework.http=debug
logging.level.org.springframework.web=debug
logging.level.org.springframework.security=debug
logging.level.org.hibernate.sql=debug
logging.level.org.springframework.data.jpa=debug
logging.level.com.com.fasterxml.jackson=debug
logging.level.pl.inferno.security=debug
logging.level.pl.inferno.security.core=debug
logging.level.pl.inferno.validation=debug
logging.level.javax.validation=debug
logging.pattern.console=%30(%yellow([%d{yyyy-MM-dd HH:mm:ss.SSS}]) %magenta([%thread])) %highlight([%-5level]) %boldCyan([%logger{15}]) %-20.-50(%gray([%M:%line])) %30(- %msg%n)
logging.file=target/${spring.application.name}.log

# ===============================
# = DevTools
# ===============================
spring.devtools.restart.enabled=true
spring.devtools.remote.restart.enabled=true
spring.devtools.livereload.enabled=true
spring.devtools.restart.additional-exclude=config/**,sql/**
spring.devtools.reload.trigger-file=.reloadtrigger

# ===============================
# = DATA SOURCE
# ===============================
spring.datasource.url=jdbc:postgresql://localhost:5432/inferno_security
spring.datasource.driver-class-name=org.postgresql.Driver
spring.datasource.platform=postgresql
spring.datasource.initialize=false
#spring.datasource.schema=classpath*:schema.sql
#spring.datasource.data=classpath*:data.sql

spring.datasource.username=inferno_init_db_admin
spring.datasource.password=inferno123
#spring.datasource.role=ROLE_TECH
#spring.datasource.generate-unique-name=true
#spring.datasource.testWhileIdle = true
#spring.datasource.dbcp2.test-while-idle=true
#spring.datasource.validationQuery = SELECT 1
#spring.datasource.dbcp2.validation-query=SELECT 1

# ===============================
# = JPA / HIBERNATE
# ===============================
spring.jpa.show-sql=true
spring.jpa.hibernate.ddl-auto=update
spring.jpa.generate-ddl=true
spring.jpa.properties.hibernate.use_sql_comments=true
spring.jpa.properties.hibernate.format_sql=true
spring.jpa.properties.hibernate.globally_quoted_identifiers=true
#spring.jpa.properties.hibernate.default_schema=inferno-schema
#spring.jpa.hibernate.naming.implicit-strategy=org.hibernate.boot.model.naming.ImplicitNamingStrategyLegacyJpaImpl
#spring.jpa.hibernate.naming.physical-strategy=org.hibernate.boot.model.naming.PhysicalNamingStrategyStandardImpl
spring.jpa.hibernate.use-new-id-generator-mappings=true
#spring.jpa.database-platform=org.hibernate.dialect.PostgreSQLDialect
spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.PostgreSQLDialect
#spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.MySQL5Dialect
#spring.jpa.properties.javax.persistence.schema-generation.database.action=drop-and-create
#spring.jpa.properties.javax.persistence.schema-generation.scripts.action=drop-and-create
#spring.jpa.properties.javax.persistence.schema-generation.create-source=metadata
#spring.jpa.properties.javax.persistence.schema-generation.drop-source=metadata-then-script
#spring.jpa.properties.javax.persistence.schema-generation.create-database-schemas=true
#spring.jpa.properties.javax.persistence.schema-generation.scripts.create-target=@basedir@/src/main/resources/sql/create.sql
#spring.jpa.properties.javax.persistence.schema-generation.scripts.drop-target=@basedir@/src/main/resources/sql/drop.sql
#spring.jpa.properties.javax.persistence.schema-generation.create-script-source=@basedir@/src/main/resources/sql/create.sql
#spring.jpa.properties.javax.persistence.schema-generation.drop-script-source=@basedir@/src/main/resources/sql/drop.sql
spring.jpa.properties.jadira.usertype.autoRegisterUserTypes=true
# ===============================
# = Thymeleaf configurations
# ===============================
spring.thymeleaf.enabled=true
spring.thymeleaf.check-template=true
spring.thymeleaf.check-template-location=true
spring.thymeleaf.mode=HTML5
spring.thymeleaf.cache=false
spring.thymeleaf.suffix=.html
spring.thymeleaf.encoding=UTF-8
spring.thymeleaf.content-type=text/html
spring.thymeleaf.prefix=classpath:/templates/
spring.resources.static-locations=classpath:/static/
spring.resources.cache-period=1
# ===============================
# = Messages configurations
# ===============================
#spring.messages.basename=classpath:messages/messages
#spring.messages.always-use-message-format=false
#spring.messages.cache-seconds=-1
#spring.messages.encoding=UTF-8
#spring.messages.fallback-to-system-locale=false
spring.mvc.message-codes-resolver-format=prefix-error-code
#spring.mvc.formcontent.putfilter.enabled=true
#spring.mvc.log-resolved-exception=true
#spring.mvc.dispatch-options-request=true
#spring.mvc.dispatch-trace-request=true
#spring.mvc.ignore-default-model-on-redirect=true


# ==============================================================
# = Spring Security / Queries for AuthenticationManagerBuilder  
# ==============================================================
spring.queries.users-query=select username, password, enabled from inferno_authorization_schema.inferno_users where username=?
spring.queries.roles-query=select u.username, r.name from inferno_authorization_schema.inferno_users u inner join inferno_authorization_schema.inferno_roles_assigment ur on(u.user_id=ur.user_user_id) inner join inferno_authorization_schema.inferno_roles r on(ur.assigned_role_id=r.role_id) where u.username=?
spring.database.superuser.name=inferno_app_admin
spring.database.superuser.password=inferno123

spring.jackson.serialization.indent-output=true

# ==============================================================
# = Spring Management Admin configuration  
# ==============================================================
#eureka.client.serviceUrl.defaultZone=${EUREKA_URI:http://localhost:8180/eureka}
#spring.boot.admin.url=http://localhost:1111
#spring.boot.admin.username=admin
#spring.boot.admin.password=admin123
management.security.enabled=false
#management.info.defaults.enabled=true
#management.info.build.enabled=true
#management.info.env.enabled=true
#management.info.git.enabled=false


security.basic.enabled=false

